


# Define the file paths for the two Excel files to be compared
$File1 = "C:\File1.xlsx"
$File2 = "C:\File2.xlsx"

# Define the names of the sheets that contain the data to be compared
$SheetName1 = "Sheet1"
$SheetName2 = "Sheet1"

# Load the Excel files into PowerShell using the Excel.Application COM object
$Excel = New-Object -ComObject Excel.Application
$Excel.Visible = $false
$Workbook1 = $Excel.Workbooks.Open($File1)
$Workbook2 = $Excel.Workbooks.Open($File2)

# Get the data from the two sheets into two separate arrays
$Sheet1 = $Workbook1.Worksheets.Item($SheetName1)
$Sheet2 = $Workbook2.Worksheets.Item($SheetName2)
$Data1 = $Sheet1.UsedRange.Value2
$Data2 = $Sheet2.UsedRange.Value2

# Convert the arrays to tables for easier comparison
$Table1 = ConvertTo-Table $Data1
$Table2 = ConvertTo-Table $Data2

# Get the column headers from both tables
$Headers1 = $Table1.Columns | Select-Object -ExpandProperty Name
$Headers2 = $Table2.Columns | Select-Object -ExpandProperty Name

# Find the common columns between the two tables
$CommonColumns = $Headers1 | Where-Object { $Headers2 -contains $_ }

# Select the common columns from each table and create new tables
$Table1Filtered = $Table1 | Select-Object $CommonColumns
$Table2Filtered = $Table2 | Select-Object $CommonColumns

# Merge the two tables into a single table using the "Join-Object" cmdlet from the PSJoin module
# Install the PSJoin module with this command: Install-Module PSJoin
Import-Module PSJoin
$MergedTable = Join-Object -Left $Table1Filtered -Right $Table2Filtered -LeftJoinProperty $CommonColumns -RightJoinProperty $CommonColumns

# Create a new column in the merged table to indicate whether a row is present in both files or not
$MergedTable | ForEach-Object {
	if ($_.Right -eq $null) {
		$_ | Add-Member -NotePropertyName "File" -NotePropertyValue "File1 Only"
	} elseif ($_.Left -eq $null) {
		$_ | Add-Member -NotePropertyName "File" -NotePropertyValue "File2 Only"
	} else {
		$_ | Add-Member -NotePropertyName "File" -NotePropertyValue "In Both Files"
	}
}

# Filter the merged table to display only the rows that are not present in both files
$FilteredTable = $MergedTable | Where-Object { $_.File -ne "In Both Files" }

# Export the filtered table to a new Excel file
$ExportFile = "C:\ExportFile.xlsx"
$FilteredTable | Export-Excel -Path $ExportFile -AutoSize -AutoFilter


#alternative 

# Define the paths to the CSV files
$csvFile1 = "path\to\your\first\file.csv"
$csvFile2 = "path\to\your\second\file.csv"

# Import the CSV files
$data1 = Import-Csv -Path $csvFile1
$data2 = Import-Csv -Path $csvFile2

# Define the columns to compare
$column1 = "ColumnName1"
$column2 = "ColumnName2"

# Compare the CSV files
$changes = @()
foreach ($row1 in $data1) {
    $row2 = $data2 | Where-Object { $_.ID -eq $row1.ID }
    if ($row2) {
        if ($row1.$column1 -ne $row2.$column1 -or $row1.$column2 -ne $row2.$column2) {
            $changes += [PSCustomObject]@{
                ID = $row1.ID
                OldValue1 = $row1.$column1
                NewValue1 = $row2.$column1
                OldValue2 = $row1.$column2
                NewValue2 = $row2.$column2
            }
        }
    }
}

# Output the changes
$changes | Format-Table -AutoSize

This script assumes that both CSV files have a common column (like an ID) to match rows. It compares the specified columns (ColumnName1 and ColumnName2) and outputs the differences.

Feel free to adjust the column names and paths to your actual CSV files. If you need any further customization, just let me know!


#alternative using the import-excel Module

# Define the paths to the CSV files
$csvFile1 = "path\to\your\first\file.csv"
$csvFile2 = "path\to\your\second\file.csv"

# Import the CSV files using ImportExcel
$data1 = Import-Excel -Path $csvFile1
$data2 = Import-Excel -Path $csvFile2

# Define the columns to compare
$column1 = "ColumnName1"
$column2 = "ColumnName2"

# Compare the CSV files
$changes = @()
foreach ($row1 in $data1) {
    $row2 = $data2 | Where-Object { $_.ID -eq $row1.ID }
    if ($row2) {
        if ($row1.$column1 -ne $row2.$column1 -or $row1.$column2 -ne $row2.$column2) {
            $changes += [PSCustomObject]@{
                ID = $row1.ID
                OldValue1 = $row1.$column1
                NewValue1 = $row2.$column1
                OldValue2 = $row1.$column2
                NewValue2 = $row2.$column2
            }
        }
    }
}

# Output the changes
$changes | Export-Excel -Path "path\to\output\changes.xlsx" -AutoSize

